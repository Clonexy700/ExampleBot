import aiohttp
import nextcord
from nextcord.ext import commands
import asyncio
from config import settings


class AdministrationCommands(commands.Cog):
    def __init__(self, client):
        self.client = client

    @commands.command(aliases=['announce', '–æ–±—å—è–≤–ª–µ–Ω–∏–µ', '–∞–Ω–Ω–∞—É–Ω', '–∞–Ω–∞—É–Ω', '–∞–Ω–∞—É–Ω—Å',
                               '–∞–Ω–Ω–∞—É–Ω—Å', '–æ–Ω–∞—É–Ω—Å', '–æ–Ω–Ω–∞—É–Ω—Å', '–æ–±—ä—è–≤', '–æ–±—ä—è–≤–ª', '–æ–±—å—è–≤', '–æ–±—å—è–≤–ª', '–æ–±—ä—è–≤–ª–µ–Ω–∏–µ'])
    @commands.has_permissions(administrator=True)
    async def __announce(self, ctx):
        title = '—Ç–∏—Ç—É–ª—å–Ω–∏–∫'
        description = '–æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–≤–æ–π —ç–º–±–µ–¥'
        embed_to_announce = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at,
                                           description=description, title=title)
        embed = nextcord.Embed(color=settings['defaultBotColor'])
        embed.add_field(name='–û–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–µ–π', value='‚úÖ - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π\n'
                                                          'üîñ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∏—Ç—É–ª—å–Ω–∏–∫\nüé® - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –∞–≤—Ç–æ—Ä–∞\n'
                                                          'üìï - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ\n1Ô∏è‚É£ - –¥–æ–±–∞–≤–∏—Ç—å 1 –ø–æ–ª–µ\n '
                                                          '2Ô∏è‚É£ - –¥–æ–±–∞–≤–∏—Ç—å 2 –ø–æ–ª–µ\n 3Ô∏è‚É£ - –¥–æ–±–∞–≤–∏—Ç—å 3 –ø–æ–ª–µ\n'
                                                          'üåÜ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä—É\nüñºÔ∏è - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/gif\n'
                                                          'üè∞ - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–≤–∞–ª\n‚ùå - –æ—Ç–º–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã')
        example_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at, description=
        '–æ–ø–∏—Å–∞–Ω–∏–µ, —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –ø–æ–ª–µ, –æ–Ω–æ –≤–º–µ—â–∞–µ—Ç –≤ —Å–µ–±—è —Ü–µ–ª—ã—Ö 4096 —Å–∏–º–≤–æ–ª–æ–≤, –∞ –µ—â—ë'
        ' –Ω–µ –∑–∞–±—ã–≤–∞–µ–º, —á—Ç–æ –ø–æ–ª—è –º–æ–∂–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å, –∫ –ø—Ä–∏–º–µ—Ä—É: '
        '`–æ–ø`, **–æ–ø**, *–æ–ø*, __–æ–ø__, ***–æ–ø***, ``–æ–ø`` __**–æ–ø**__', title='—Ç–∏—Ç—É–ª—å–Ω–∏–∫, –¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤, —Å–ø—Ä–∞–≤–æ –æ—Ç '
                                                                         '—Ç–∏—Ç—É–ª—å–Ω–∏–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–∏–Ω–∏–∞—Ç—é—Ä–∞, '
                                                                         '–º–∏–Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, '
                                                                         '–µ–≥–æ –º–æ–∂–Ω–æ –Ω–µ —Å—Ç–∞–≤–∏—Ç—å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–Ω–æ '
                                                                         '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        example_embed.set_author(name='–≠—Ç–æ—Ç —ç–º–±–µ–¥ - –ø—Ä–∏–º–µ—Ä –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π.\n–∞–≤—Ç–æ—Ä—Å–∫–æ–µ –ø–æ–ª–µ, –¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤',
                                 url=self.client.user.avatar.url)
        example_embed.set_thumbnail(
            url='https://sun9-76.userapi.com/impf/6lUwW5CQFF8DKvQNctCQyMDOKxshlwid3tTt-g/gu4Moy9azWI.jpg?size=604x389&quality=96&sign=7d45e90d8ff9b0017932a8d5e9ca0581&type=album')
        example_embed.add_field(name='–∏–º—è 1 –ø–æ–ª—è –¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤', value='–∑–Ω–∞—á–µ–Ω–∏–µ 1 –ø–æ–ª—è –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤',
                                inline=False)
        example_embed.add_field(name='–∏–º—è 2 –ø–æ–ª—è –¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤', value='–∑–Ω–∞—á–µ–Ω–∏–µ 2 –ø–æ–ª—è –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤',
                                inline=False)
        example_embed.add_field(name='–∏–º—è 3 –ø–æ–ª—è –¥–æ 256 —Å–∏–º–≤–æ–ª–æ–≤', value='–∑–Ω–∞—á–µ–Ω–∏–µ 3 –ø–æ–ª—è '
                                                                         '–¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–¥ –Ω–∏–º '
                                                                         '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥–≤–∞–ª '
                                                                         '–∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', inline=False)
        example_embed.set_image(url='https://upload.wikimedia.org/wikipedia/ru/6/61/Rickrolling.gif')
        example_embed.set_footer(text='–ø–æ–¥–≤–∞–ª –¥–æ 2048 —Å–∏–º–≤–æ–ª–æ–≤')
        await ctx.send(embed=example_embed)
        await ctx.send('—Ç–≤–æ–π —ç–º–±–µ–¥ —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:')
        your_embed_msg = await ctx.send(embed=embed_to_announce)
        await ctx.send(embed=embed)
        menu_emojis = ['‚úÖ', 'üîñ', 'üé®', 'üìï', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', 'üåÜ', 'üñºÔ∏è', 'üè∞', '‚ùå']
        for e in menu_emojis:
            await your_embed_msg.add_reaction(e)

        def check(reaction, user):
            return (reaction.message.id == your_embed_msg.id) and (user.id == ctx.author.id) and (
                    str(reaction) in menu_emojis)

        try:
            reaction, user = await self.client.wait_for('reaction_add', check=check, timeout=360)
        except asyncio.TimeoutError:
            await ctx.send("Timed out")
            return
        title = '—Ç–∏—Ç—É–ª—å–Ω–∏–∫'
        description = '–æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–≤–æ–π —ç–º–±–µ–¥'
        image_url = None
        thumbnail_url = None
        name_1 = None
        value_1 = None
        name_2 = None
        value_2 = None
        name_3 = None
        value = None
        footer = None
        author = None
        while str(reaction) != '‚úÖ' or '‚ùå':
            if str(reaction) == 'üîñ':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏—Ç—É–ª—å–Ω–∏–∫–∞',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∏—Ç—É–ª—å–Ω–∏–∫–∞ –Ω–∏–∂–µ',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=360)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                title = reply.content
                embed_to_announce = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at,
                                                   description=f'{description}', title=f'{title}')
                if author is not None:
                    embed_to_announce.set_author(name=f'{author}')
                if footer is not None:
                    embed_to_announce.set_footer(text=f'{footer}')
                if image_url is not None:
                    embed_to_announce.set_image(url=image_url)
                if thumbnail_url is not None:
                    embed_to_announce.set_thumbnail(url=thumbnail_url)
                if name_1 is not None:
                    embed_to_announce.add_field(name=f'{name_1}', value=f'{value_1}', inline=False)
                if name_2 is not None:
                    embed_to_announce.add_field(name=f'{name_2}', value=f'{value_2}', inline=False)
                if name_3 is not None:
                    embed_to_announce.add_field(name=f'{name_3}', value=f'{value_3}', inline=False)
            if str(reaction) == 'üé®':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∞',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∞ –Ω–∏–∂–µ',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=360)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                author = reply.content
                embed_to_announce.set_author(name=f'{author}')
            if str(reaction) == 'üìï':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∏–∂–µ',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=1080)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                description = reply.content
                embed_to_announce = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at,
                                                   description=f'{description}', title=f'{title}')
                if author is not None:
                    embed_to_announce.set_author(name=f'{author}')
                if footer is not None:
                    embed_to_announce.set_footer(text=f'{footer}')
                if image_url is not None:
                    embed_to_announce.set_image(url=image_url)
                if thumbnail_url is not None:
                    embed_to_announce.set_thumbnail(url=thumbnail_url)
                if name_1 is not None:
                    embed_to_announce.add_field(name=f'{name_1}', value=f'{value_1}', inline=False)
                if name_2 is not None:
                    embed_to_announce.add_field(name=f'{name_2}', value=f'{value_2}', inline=False)
                if name_3 is not None:
                    embed_to_announce.add_field(name=f'{name_3}', value=f'{value_3}', inline=False)
            if str(reaction) == '1Ô∏è‚É£':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ù–ê–ó–í–ê–ù–ò–Ø –ø–æ–ª—è',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=360)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                name_1 = reply.content
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ó–ù–ê–ß–ï–ù–ò–Ø –ø–æ–ª—è',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ó–ù–ê–ß–ï–ù–ò–Ø –ø–æ–ª—è',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=1080)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                value_1 = reply.content
                embed_to_announce.add_field(name=f'{name_1}', value=f'{value_1}', inline=False)
            if str(reaction) == '2Ô∏è‚É£':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ù–ê–ó–í–ê–ù–ò–Ø –ø–æ–ª—è',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=360)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                name_2 = reply.content
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ó–ù–ê–ß–ï–ù–ò–Ø –ø–æ–ª—è',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ó–ù–ê–ß–ï–ù–ò–Ø –ø–æ–ª—è',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=1080)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                value_2 = reply.content
                embed_to_announce.add_field(name=f'{name_2}', value=f'{value_2}', inline=False)
            if str(reaction) == '3Ô∏è‚É£':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–ª—è',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ù–ê–ó–í–ê–ù–ò–Ø –ø–æ–ª—è',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=360)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                name_3 = reply.content
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ó–ù–ê–ß–ï–ù–ò–Ø –ø–æ–ª—è',
                                     value=f'–Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ó–ù–ê–ß–ï–ù–ò–Ø –ø–æ–ª—è',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=1080)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                value_3 = reply.content
                embed_to_announce.add_field(name=f'{name_3}', value=f'{value_3}', inline=False)
            if str(reaction) == 'üåÜ':
                try:
                    help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                    help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã',
                                         value=f'–û–¢–ü–†–ê–í–¨–¢–ï –°–°–´–õ–ö–£ (URL) –ù–ê –ú–ò–ù–ò–ê–¢–Æ–†–£',
                                         inline=False)
                    await ctx.send(embed=help_embed)

                    def check(author):
                        def inner_check(message):
                            return message.author == author

                        return inner_check

                    try:
                        reply = await self.client.wait_for('message', check=check(ctx.author), timeout=360)
                    except asyncio.TimeoutError:
                        await ctx.send("Timed out")
                        return
                    thumbnail_url = reply.content
                    embed_to_announce.set_thumbnail(url=thumbnail_url)
                except commands.CommandInvokeError(err):
                    await ctx.send(err)
            if str(reaction) == 'üñºÔ∏è':
                try:
                    help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                    help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–∞—Ç—é—Ä—ã',
                                         value=f'–û–¢–ü–†–ê–í–¨–¢–ï –°–°–´–õ–ö–£ (URL) –ù–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï',
                                         inline=False)
                    await ctx.send(embed=help_embed)

                    def check(author):
                        def inner_check(message):
                            return message.author == author

                        return inner_check

                    try:
                        reply = await self.client.wait_for('message', check=check(ctx.author), timeout=360)
                    except asyncio.TimeoutError:
                        await ctx.send("Timed out")
                        return
                    image_url = reply.content
                    embed_to_announce.set_image(url=image_url)
                except commands.CommandInvokeError(err):
                    await ctx.send(err)
            if str(reaction) == 'üè∞':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–≤–∞–ª–∞',
                                     value=f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–≤–∞–ª–∞',
                                     inline=False)
                await ctx.send(embed=help_embed)

                def check(author):
                    def inner_check(message):
                        return message.author == author

                    return inner_check

                try:
                    reply = await self.client.wait_for('message', check=check(ctx.author), timeout=720)
                except asyncio.TimeoutError:
                    await ctx.send("Timed out")
                    return
                footer = reply.content
                embed_to_announce.set_footer(text=f'{footer}')
            if str(reaction) == '‚ùå':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–û—Ç–º–µ–Ω–∞',
                                     value=f'–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞',
                                     inline=False)
                return await ctx.send(embed=help_embed)
            if str(reaction) == '‚úÖ':
                help_embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
                help_embed.add_field(name='–û–∫',
                                     value=f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –æ–±—ä—è–≤–ª–µ–Ω–∏–π',
                                     inline=False)
                await ctx.send(embed=help_embed)
                announce_channel = self.client.get_channel(settings['announce_channel'])
                return await announce_channel.send(embed=embed_to_announce)
            await ctx.send('—Ç–≤–æ–π —ç–º–±–µ–¥ —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:')
            your_embed_msg = await ctx.send(embed=embed_to_announce)
            await ctx.send(embed=embed)
            menu_emojis = ['‚úÖ', 'üîñ', 'üé®', 'üìï', '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', 'üåÜ', 'üñºÔ∏è', 'üè∞', '‚ùå']
            for e in menu_emojis:
                await your_embed_msg.add_reaction(e)

            def check(reaction, user):
                return (reaction.message.id == your_embed_msg.id) and (user.id == ctx.author.id) and (
                        str(reaction) in menu_emojis)

            try:
                reaction, user = await self.client.wait_for('reaction_add', check=check, timeout=360)
            except asyncio.TimeoutError:
                await ctx.send("Timed out")
                return

    @__announce.error
    async def __announce_error_handler(self, ctx, error):
        embed = nextcord.Embed(color=settings['defaultBotColor'], timestamp=ctx.message.created_at)
        if isinstance(error, commands.CommandInvokeError):
            embed.add_field(name='–û—à–∏–±–∫–∞', value=f'–ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –æ—à–∏–±–∫–æ–π –∫–ª–∞—Å—Å–∞ InvokeError. '
                                                 f'–í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ—Ä–∞–∑—Ä–µ—à–∏–º–∞—è –æ—à–∏–±–∫–∞:\n{error}')
            await ctx.send(embed=embed)




def setup(client):
    client.add_cog(AdministrationCommands(client))
